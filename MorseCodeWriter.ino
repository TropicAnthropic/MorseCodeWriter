// MorseCodeWriter
// Version 2.06
// October 6th 2023
// Matthew Bryan AKA TropicAnthropic AKA The Blitter Brothers

#include <Arduboy2.h>
#include <ArduboyTones.h>
#include <Tinyfont.h>

Arduboy2 arduboy;
//Tinyfont tinyfont;
Sprites sprites;
ArduboyTones sound(arduboy.audio.enabled);

const uint8_t PROGMEM BlitterBrothers[] = {
128, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0xf8, 0xf8, 0x18, 0x18, 0x18, 0x00, 0xf8, 0xf8, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x80, 0xc0, 0x40, 0x40, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0x8f, 0x80, 0x80, 0x80, 0x80, 0x0f, 0x0f, 0x00, 0x80, 0x80, 0x0f, 0x0f, 0x00, 0x07, 0x0f, 0x0d, 0x0d, 0x0d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x19, 0x19, 0xff, 0xef, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xd8, 0xd8, 0x00, 0x00, 0x30, 0x30, 0xf8, 0xf8, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0xf8, 0xf8, 0x30, 0x30, 0x00, 0x00, 0xe0, 0xf0, 0x50, 0x50, 0x70, 0x60, 0x00, 0x00, 0xf0, 0xf0, 0x60, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x81, 0x00, 0x00, 0x01, 0x03, 0x02, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x8c, 0x8c, 0xff, 0xf7, 0x00, 0x00, 0xf8, 0xf8, 0x30, 0x18, 0x18, 0x30, 0x00, 0x00, 0xf0, 0xf8, 0x98, 0x98, 0xf8, 0xf0, 0x00, 0x00, 0x18, 0x18, 0xfc, 0xfc, 0x18, 0x18, 0x00, 0x00, 0xff, 0xff, 0x18, 0x18, 0x18, 0xf8, 0xf0, 0x00, 0x00, 0xf0, 0xf8, 0xa8, 0xa8, 0xb8, 0xb0, 0x00, 0x00, 0xf8, 0xf8, 0x30, 0x18, 0x18, 0x30, 0x00, 0x00, 0x98, 0x9c, 0xac, 0xcc, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0x33, 0x1e, 0x1e, 0x00, 0xf8, 0xf8, 0x30, 0x18, 0x18, 0x30, 0x00, 0xf0, 0xf8, 0xa8, 0xa8, 0xb8, 0xb0, 0x00, 0x98, 0x9c, 0xac, 0xcc, 0xc8, 0x00, 0xf0, 0xf8, 0xa8, 0xa8, 0xb8, 0xb0, 0x00, 0x00, 0xf8, 0xf8, 0x30, 0x18, 0xf8, 0xf0, 0x00, 0x18, 0x18, 0xfc, 0xfc, 0x18, 0x18, 0x00, 0x00, 0x98, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM Keypad[] = {
128, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x00, 0x0f, 0x10, 0x21, 0x51, 0xa1, 0x81, 0x41, 0x2b, 0x10, 0x0f, 0x00, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x50, 0x50, 0x90, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x7f, 0x80, 0xa1, 0xa1, 0x81, 0x81, 0x42, 0x25, 0x12, 0x0c, 0x00, 0x80, 0x40, 0x40, 0x80, 0x00, 0x0c, 0x12, 0x21, 0x50, 0xa0, 0x81, 0x81, 0x81, 0xaf, 0x80, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x08, 0x04, 0x82, 0x0a, 0x0a, 0x12, 0x64, 0x08, 0xf0, 0x07, 0x08, 0x10, 0x24, 0x20, 0x20, 0x20, 0x13, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x82, 0xa1, 0xa0, 0x80, 0x81, 0x82, 0xad, 0x82, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x04, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM Key[] = {
128, 124,
0xdd, 0xfb, 0x02, 0xc3, 0x0f, 0x7f, 0x8f, 0xf3, 0x02, 0xfb, 0xff, 0xff, 0x06, 0x73, 0xfb, 0xfb, 0xfa, 0x07, 0x8f, 0xfe, 0xfb, 0x03, 0xdb, 0x9b, 0x22, 0x67, 0xff, 0xff, 0x66, 0xcb, 0xdb, 0x9a, 0x33, 0xff, 0xff, 0xfb, 0x02, 0xdb, 0xdb, 0xfa, 0x73, 0xff, 0xff, 0xfe, 0xff, 0xff, 0x07, 0x73, 0xfb, 0xfb, 0xfb, 0x63, 0xff, 0x07, 0x72, 0xfb, 0xfb, 0xfb, 0x07, 0x8e, 0xff, 0xfb, 0x03, 0xfa, 0xfb, 0xf3, 0x07, 0x8f, 0xfe, 0xfb, 0x03, 0xdb, 0xda, 0xfb, 0x73, 0xff, 0xff, 0xfe, 0xff, 0xfb, 0xe2, 0x03, 0x7f, 0x1e, 0xe3, 0xc3, 0x1e, 0x7f, 0x8b, 0xf3, 0xfe, 0xff, 0xfb, 0x03, 0xda, 0x9b, 0x23, 0x66, 0xff, 0xff, 0xfa, 0x03, 0xfb, 0xfe, 0xf3, 0xfb, 0xfa, 0x03, 0x03, 0xfb, 0xf2, 0xff, 0xff, 0xfa, 0x03, 0xdb, 0xda, 0xfb, 0x73, 0xfe, 0xff, 0xfb, 0x02, 0xdb, 0x9b, 0x22, 0x67, 0xda, 
0xeb, 0xbe, 0x2e, 0xef, 0x57, 0xbe, 0x6f, 0xd6, 0xbe, 0x6e, 0xd7, 0x7f, 0xd7, 0xae, 0xbe, 0x66, 0xde, 0xaf, 0x77, 0xdf, 0xae, 0xb6, 0x6e, 0xdf, 0xaf, 0x76, 0xae, 0xdf, 0x6e, 0xd6, 0xbe, 0x66, 0xdf, 0xaf, 0x77, 0xae, 0xde, 0x36, 0xee, 0x5e, 0xb6, 0xef, 0x1f, 0xe7, 0x7f, 0x9f, 0xe7, 0x7e, 0x9e, 0xe6, 0xbe, 0x5f, 0xe7, 0xbf, 0x5e, 0xe6, 0xbe, 0x5e, 0xa7, 0xff, 0xaf, 0x5e, 0xd6, 0xb6, 0x6e, 0xde, 0x37, 0xef, 0x57, 0xae, 0xfe, 0x2e, 0xd6, 0x7e, 0xae, 0xd7, 0x7f, 0xaf, 0xaf, 0xff, 0xaf, 0xaf, 0xfe, 0xaf, 0x6f, 0xdf, 0x36, 0xee, 0x5f, 0xa7, 0xff, 0x1f, 0xe6, 0xbe, 0x6e, 0x97, 0xef, 0xbe, 0x26, 0xef, 0x5e, 0xae, 0x56, 0xff, 0xaf, 0x57, 0xae, 0xbe, 0x66, 0x9f, 0xef, 0x7f, 0x97, 0xee, 0x7e, 0xd6, 0xae, 0xae, 0x7e, 0xa7, 0xdf, 0xae, 0xb6, 0x6e, 0x97, 0x6f, 0xae, 0xda, 
0xff, 0xaa, 0x55, 0xeb, 0xbd, 0x56, 0xeb, 0xbd, 0xd6, 0x7f, 0xd5, 0xab, 0x7e, 0xd5, 0xaa, 0x77, 0xdc, 0xab, 0xed, 0xba, 0x57, 0xea, 0x3d, 0xd6, 0xab, 0x7d, 0x56, 0xab, 0xfd, 0x36, 0xef, 0xdd, 0xbb, 0x76, 0xed, 0x9b, 0x76, 0xed, 0x9b, 0x76, 0xad, 0xda, 0x75, 0x4f, 0xb9, 0xd6, 0xaf, 0x79, 0xae, 0xdb, 0xf6, 0xad, 0xdb, 0x76, 0xad, 0xfb, 0xae, 0x5b, 0xf5, 0xde, 0xb5, 0x6b, 0xde, 0xb5, 0x6b, 0xde, 0xb5, 0x6b, 0xdd, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xdb, 0xb6, 0x6d, 0xfb, 0x56, 0xad, 0xfa, 0x57, 0xaa, 0xfd, 0x57, 0xaa, 0xfd, 0xab, 0x56, 0xf9, 0xae, 0x5b, 0xe4, 0xbf, 0x49, 0x76, 0xda, 0x55, 0xaf, 0xf4, 0xab, 0x5d, 0xaa, 0xf7, 0x2d, 0xda, 0xb5, 0x6f, 0x92, 0xfd, 0x66, 0x9b, 0xed, 0xb6, 0x5b, 0xad, 0xfe, 0x6b, 0x95, 0x7a, 0xee, 0x5a, 0xb5, 0xeb, 0x5e, 0xb1, 0x6e, 0xd5, 
0xff, 0xaa, 0x55, 0xfe, 0xab, 0x55, 0xfe, 0xb7, 0x6d, 0xdb, 0xfe, 0x55, 0xbb, 0xd6, 0x6d, 0xb3, 0xee, 0xbd, 0x6a, 0xd6, 0xfb, 0xad, 0x56, 0xfa, 0xad, 0x56, 0xe9, 0xbe, 0x6a, 0xd5, 0xbe, 0x77, 0xdd, 0x6b, 0xff, 0xda, 0x35, 0xef, 0xda, 0x35, 0xef, 0xda, 0x35, 0xeb, 0x5e, 0xb5, 0xea, 0x5f, 0xb5, 0x7a, 0xef, 0xd6, 0xbd, 0x7b, 0xd7, 0xee, 0xbd, 0x6b, 0xbe, 0xeb, 0xd6, 0xbd, 0x6b, 0xd6, 0xbd, 0x6b, 0xd6, 0xbd, 0x5b, 0xf6, 0xad, 0x5b, 0xf5, 0xaf, 0x7a, 0xd5, 0xaf, 0xfa, 0xb5, 0xaf, 0xfd, 0xab, 0x56, 0xfd, 0x93, 0x6e, 0xf5, 0x9a, 0x6f, 0xf2, 0x5d, 0xd7, 0xb4, 0x6d, 0xdb, 0xb5, 0x6a, 0x9f, 0x74, 0xeb, 0x56, 0x1d, 0x02, 0x05, 0x03, 0x00, 0x21, 0x01, 0x08, 0x21, 0x00, 0x2c, 0x08, 0x20, 0x08, 0x00, 0x21, 0x01, 0x01, 0x01, 0x42, 0x03, 0x05, 0x0e, 0xbb, 0xf5, 0xab, 0xde, 
0xff, 0xaa, 0x55, 0x3f, 0x0a, 0x95, 0x4f, 0x2d, 0x0b, 0x0f, 0x4a, 0x27, 0x0d, 0x02, 0x2f, 0x4b, 0x86, 0x2d, 0x0b, 0x4e, 0x9b, 0x16, 0x2d, 0xfb, 0xd6, 0xad, 0x7b, 0xd6, 0xad, 0x7a, 0xd7, 0xad, 0x7b, 0xd7, 0xfe, 0xad, 0xf3, 0xde, 0xbd, 0x63, 0xde, 0x7d, 0xd3, 0xae, 0xfd, 0xd3, 0x2e, 0xfd, 0x6b, 0x57, 0xfe, 0xd5, 0xb7, 0x7d, 0xce, 0xbb, 0x75, 0xdf, 0x6a, 0xf7, 0x5a, 0xfd, 0x57, 0xfa, 0x6f, 0x55, 0xfa, 0xdf, 0xb5, 0xef, 0xba, 0xad, 0x7f, 0xea, 0xd5, 0xbf, 0x5a, 0xf7, 0xde, 0xb5, 0x6a, 0xff, 0x55, 0xaa, 0xff, 0x6d, 0xda, 0xb7, 0x7f, 0xc8, 0xb7, 0x7f, 0xa8, 0xd7, 0x6e, 0xb9, 0xd7, 0x6e, 0xd5, 0xbb, 0x5d, 0xf0, 0xa0, 0x40, 0xc8, 0x41, 0x80, 0x12, 0x04, 0x40, 0x2b, 0x02, 0x24, 0x49, 0x12, 0x44, 0x29, 0x80, 0x4a, 0x61, 0xd0, 0xa4, 0x69, 0xf8, 0x5e, 0xb7, 0xea, 0x5d, 
0xff, 0x56, 0xb0, 0xe4, 0xc9, 0xa4, 0xa8, 0xd2, 0x59, 0x44, 0x71, 0x48, 0x72, 0x59, 0x68, 0x52, 0xd4, 0xa9, 0xa2, 0xd4, 0x54, 0xd1, 0xe2, 0xbf, 0x6d, 0xda, 0x37, 0x6a, 0xdd, 0xb7, 0x1a, 0xcd, 0x97, 0x1a, 0x6f, 0x9e, 0x22, 0xc7, 0xee, 0x21, 0xeb, 0xef, 0xba, 0x56, 0xe1, 0xa7, 0xb5, 0x4d, 0x4f, 0x15, 0x3b, 0xee, 0xbd, 0xeb, 0xb6, 0xfd, 0xaf, 0x52, 0xfd, 0xef, 0xb5, 0xd7, 0xfd, 0xb7, 0x6d, 0xdb, 0xb7, 0xfe, 0x81, 0x00, 0xa8, 0x50, 0xea, 0xa8, 0xa0, 0x28, 0x01, 0xff, 0xde, 0x75, 0xdb, 0x7d, 0xd7, 0xad, 0x7e, 0xeb, 0x55, 0xbe, 0xeb, 0xbd, 0xd6, 0x6b, 0xbd, 0xb6, 0xef, 0x75, 0x9a, 0xef, 0xba, 0x55, 0xab, 0x54, 0x0b, 0x00, 0x44, 0x11, 0x00, 0x40, 0x08, 0x52, 0xa5, 0x55, 0xfa, 0x45, 0x19, 0xa2, 0x44, 0x28, 0x81, 0x00, 0x28, 0x82, 0x05, 0x51, 0xaf, 0x5a, 0xb5, 0xef, 
0xff, 0x55, 0x8a, 0x23, 0x16, 0x80, 0x4b, 0x60, 0x01, 0x9b, 0x04, 0x00, 0xdd, 0xbd, 0x04, 0x80, 0x25, 0x18, 0x81, 0xf5, 0x03, 0x0a, 0xb5, 0x2f, 0xd5, 0xff, 0x00, 0x55, 0xe9, 0x04, 0xf0, 0x0e, 0x59, 0x44, 0xd1, 0xa0, 0x0f, 0x80, 0x36, 0x47, 0x0a, 0x76, 0x1b, 0x0a, 0x56, 0x29, 0xa6, 0x51, 0x05, 0xb9, 0x62, 0x0c, 0x23, 0x7e, 0x57, 0x7d, 0x56, 0x3f, 0xb5, 0x2a, 0xbf, 0xae, 0x3d, 0x03, 0x40, 0x09, 0x14, 0x40, 0xa4, 0x88, 0x40, 0x92, 0x2c, 0xc7, 0x20, 0x88, 0x50, 0x82, 0x48, 0x24, 0x51, 0x01, 0x03, 0xde, 0x1f, 0x55, 0x8b, 0x5e, 0x15, 0x4f, 0x1a, 0x4d, 0x0f, 0x1a, 0x57, 0x0d, 0x9e, 0x0b, 0x15, 0x9e, 0x15, 0x4b, 0x1c, 0x95, 0x00, 0x80, 0x04, 0x21, 0x04, 0x4b, 0xb5, 0x0a, 0x55, 0xb2, 0x44, 0x2b, 0x94, 0x40, 0xa3, 0xbc, 0xe8, 0x2a, 0xfc, 0x6b, 0xde, 0xb5, 0xfb, 0xaf, 
0xff, 0x55, 0xde, 0x70, 0x04, 0xa0, 0xe9, 0xad, 0xa3, 0xda, 0xaa, 0x2a, 0x7a, 0xa3, 0x3a, 0xaa, 0xe9, 0x8d, 0xaa, 0xf4, 0xd4, 0xf2, 0xea, 0xf0, 0xfe, 0xf2, 0xf0, 0xf5, 0x7a, 0xf0, 0xfd, 0xf8, 0x5d, 0xfa, 0xf9, 0xbc, 0xfa, 0x6d, 0xfd, 0x59, 0x2c, 0xb5, 0x3d, 0x6f, 0x59, 0x18, 0x6b, 0x7c, 0xba, 0xec, 0xfd, 0xf4, 0xdd, 0x6e, 0xfd, 0xec, 0xfd, 0xae, 0xfe, 0xf4, 0x0e, 0x7e, 0x8d, 0x4e, 0x7c, 0xdd, 0x5c, 0x4d, 0xaa, 0xaa, 0x0c, 0xaa, 0xa3, 0x0a, 0xa4, 0x02, 0xad, 0x4a, 0x1d, 0xed, 0x65, 0x2e, 0xd7, 0xd6, 0x26, 0xd7, 0x0a, 0xfe, 0xef, 0x5a, 0xbb, 0xfe, 0x66, 0x5b, 0xfe, 0xd7, 0xb9, 0xff, 0x57, 0xad, 0xfb, 0xdf, 0x35, 0xed, 0xdb, 0xbd, 0x57, 0xeb, 0xb6, 0x5c, 0xf4, 0x55, 0xbe, 0xec, 0x01, 0x12, 0xec, 0x00, 0x03, 0xde, 0xf5, 0xab, 0xde, 0x6b, 0xb6, 0xdb, 0x7e, 0xd5, 
0x4f, 0x55, 0x2a, 0x51, 0x86, 0x00, 0xff, 0xff, 0xf5, 0xdf, 0xff, 0xf7, 0xdd, 0xff, 0xfb, 0xdf, 0xff, 0xfa, 0xff, 0xdf, 0xfb, 0xff, 0xfe, 0xef, 0xff, 0x7b, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xdf, 0xf5, 0x7f, 0x5f, 0x7d, 0x7f, 0x8d, 0x21, 0x54, 0x48, 0x2a, 0x95, 0xc1, 0x2a, 0x95, 0xc1, 0x2c, 0x0a, 0xd0, 0x2f, 0x7f, 0x7d, 0x1f, 0x37, 0x3f, 0x1e, 0x35, 0x1f, 0xbf, 0x10, 0x5d, 0xab, 0x45, 0x7c, 0xa3, 0x0d, 0xf5, 0xaa, 0x08, 0x6a, 0xa8, 0x5a, 0xe8, 0xaa, 0x54, 0xa8, 0x55, 0x88, 0x77, 0xb5, 0xca, 0x31, 0x5e, 0x6b, 0x34, 0x00, 0x1f, 0x8f, 0x19, 0x16, 0x9f, 0x09, 0x17, 0x8f, 0x8a, 0x45, 0x0f, 0x85, 0xca, 0x07, 0x8d, 0x03, 0x8e, 0x05, 0x8b, 0x0d, 0x86, 0x0b, 0x8d, 0x03, 0x8f, 0x0a, 0x02, 0x45, 0x00, 0x5a, 0xf6, 0xdf, 0xb5, 0x6e, 0xfb, 0x9e, 0xf3, 0xed, 0x9e, 0xf5, 0xab, 
0xb0, 0xba, 0xb1, 0xd4, 0xb2, 0xb0, 0xf5, 0x59, 0xb5, 0xb1, 0xd4, 0x78, 0xd8, 0x52, 0xb6, 0xd8, 0x34, 0xfa, 0x02, 0x54, 0x28, 0x54, 0x90, 0x24, 0x14, 0x28, 0x04, 0x10, 0xea, 0xf6, 0x10, 0x08, 0x24, 0x48, 0x3e, 0x00, 0xc0, 0x3c, 0xa3, 0x4d, 0xaa, 0x35, 0x4b, 0xda, 0x20, 0x6e, 0x95, 0xa9, 0x56, 0x55, 0xa9, 0x54, 0x43, 0x38, 0xa4, 0x4a, 0x52, 0x88, 0x7e, 0x21, 0x88, 0x50, 0xa1, 0x42, 0x10, 0x00, 0x00, 0x80, 0x04, 0x24, 0x03, 0x0d, 0x3a, 0x55, 0x6e, 0x55, 0x0a, 0x49, 0x06, 0x40, 0x00, 0x48, 0x80, 0x42, 0x10, 0x44, 0x00, 0x50, 0xc0, 0x02, 0x10, 0xd0, 0xd0, 0x24, 0x10, 0xc0, 0xe8, 0xa0, 0x10, 0xe0, 0xb0, 0x28, 0x10, 0xc0, 0x06, 0x10, 0x2a, 0x42, 0x14, 0x48, 0xb3, 0x04, 0x54, 0x95, 0x21, 0x52, 0x1d, 0xee, 0xbb, 0xb6, 0xef, 0xbd, 0xee, 0x7b, 0xae, 0xf6, 0xbb, 0xee, 
0xdf, 0x7f, 0xcf, 0xdb, 0x5e, 0x5f, 0x57, 0x7f, 0xdf, 0xd7, 0x9f, 0x7f, 0xd7, 0x5f, 0x7f, 0xff, 0x56, 0x90, 0x65, 0x31, 0xa4, 0x48, 0x38, 0x4b, 0xa0, 0x48, 0x94, 0xd0, 0x89, 0xb6, 0x48, 0xa9, 0x24, 0xdc, 0x21, 0xea, 0x55, 0xaa, 0xd2, 0xad, 0x52, 0x55, 0xad, 0xd2, 0x25, 0xd9, 0xaa, 0x56, 0xa9, 0x54, 0xab, 0x55, 0xa2, 0x5c, 0xd3, 0x21, 0x42, 0x25, 0x40, 0x4f, 0x90, 0x41, 0x42, 0x21, 0x88, 0x00, 0x00, 0x06, 0x5a, 0x05, 0x2a, 0x51, 0x44, 0xd4, 0xe5, 0xc5, 0xd4, 0xd4, 0xe4, 0xd5, 0xd6, 0xd4, 0xd2, 0xd5, 0xd4, 0xe7, 0xc5, 0xf2, 0xc4, 0x67, 0xf5, 0xcc, 0x6b, 0xf5, 0xca, 0xf6, 0x6d, 0xca, 0xf5, 0x6e, 0xc9, 0xf6, 0xcb, 0x74, 0xe4, 0x82, 0x11, 0x80, 0x22, 0xa0, 0x54, 0x8b, 0x00, 0xa4, 0x49, 0x12, 0xa8, 0x03, 0x3f, 0xec, 0xdb, 0x6d, 0xff, 0x5b, 0xab, 0xfe, 0x6b, 0xbe, 
0x55, 0xab, 0x84, 0x29, 0xd5, 0x2b, 0x69, 0xd7, 0x2a, 0xf8, 0x6b, 0x56, 0x79, 0x65, 0xdd, 0x73, 0x6c, 0x75, 0xcb, 0x70, 0x76, 0x69, 0xec, 0xab, 0x39, 0xea, 0x62, 0xbc, 0x6a, 0x46, 0xb8, 0xd2, 0xad, 0x28, 0xea, 0x3d, 0xab, 0x54, 0x7a, 0x95, 0x6d, 0xb2, 0xad, 0xf6, 0x99, 0xb6, 0xaa, 0xb5, 0xae, 0xd1, 0xde, 0xb5, 0xa9, 0xd7, 0x68, 0x95, 0xaa, 0xb1, 0xca, 0xb5, 0xc8, 0x73, 0xca, 0x54, 0x91, 0xd6, 0xe4, 0x51, 0xd4, 0xa4, 0xc9, 0xf5, 0x42, 0xad, 0xd7, 0x55, 0xd7, 0x57, 0xd7, 0xd5, 0xae, 0xd3, 0x97, 0xad, 0xd2, 0x57, 0xca, 0xd5, 0xb6, 0xcb, 0x55, 0xaa, 0xd7, 0xca, 0x95, 0xf6, 0x85, 0x6b, 0xd6, 0x55, 0xa2, 0xd7, 0xd4, 0x2b, 0xa5, 0x52, 0xab, 0x54, 0xd1, 0xa4, 0x58, 0x62, 0x85, 0x68, 0x51, 0xc4, 0x44, 0x51, 0x48, 0x83, 0x7f, 0xde, 0x75, 0xeb, 0x9e, 0xf5, 0xff, 0x5a, 
0x4b, 0xb1, 0x4a, 0x89, 0x73, 0x15, 0x45, 0xb5, 0x49, 0x15, 0xab, 0x45, 0x39, 0x4b, 0xa5, 0x11, 0x6b, 0x95, 0x49, 0x33, 0x4d, 0x91, 0x57, 0xad, 0x41, 0x5b, 0x55, 0x05, 0x53, 0x55, 0x55, 0x49, 0x16, 0x51, 0x4d, 0x55, 0x91, 0x55, 0xa5, 0xaa, 0x4b, 0xa8, 0xab, 0x2a, 0x4a, 0xb2, 0xae, 0x8a, 0xb5, 0xaa, 0x95, 0xaa, 0x77, 0x88, 0x6b, 0xb5, 0x4a, 0xab, 0xaa, 0x4a, 0x36, 0xc9, 0xaa, 0x15, 0x6a, 0x82, 0x5d, 0x2a, 0x53, 0x4a, 0x94, 0x4b, 0x25, 0xd4, 0x95, 0x2a, 0x91, 0xea, 0x12, 0x02, 0xfa, 0x22, 0x0a, 0x52, 0xaa, 0x2a, 0x4a, 0xaa, 0x94, 0xaa, 0x04, 0xb5, 0x4a, 0xa0, 0x2c, 0x82, 0xa8, 0x26, 0x40, 0xad, 0x02, 0xa8, 0xaa, 0x02, 0xa4, 0xa9, 0x0a, 0x62, 0x88, 0x53, 0x54, 0x4a, 0x11, 0xa5, 0x4a, 0x64, 0x05, 0x5b, 0xa2, 0x40, 0x14, 0xff, 0xeb, 0xb6, 0xbf, 0xea, 0x7f, 0xff, 
0x75, 0xca, 0x15, 0x74, 0xcb, 0x35, 0x49, 0x32, 0x6e, 0x95, 0x60, 0x2d, 0x53, 0xd4, 0x35, 0xcb, 0xb4, 0x92, 0x2d, 0xd1, 0xaa, 0x2b, 0xd6, 0x50, 0x95, 0xb5, 0xa5, 0x09, 0xfa, 0x55, 0x84, 0x75, 0x89, 0xd5, 0xaa, 0x55, 0x8a, 0x6a, 0x34, 0x4a, 0xa2, 0x1c, 0xab, 0x50, 0xab, 0x36, 0xc8, 0x36, 0xa4, 0xaa, 0xa4, 0x2a, 0xd5, 0x2a, 0x2a, 0xd5, 0x2a, 0x4a, 0x25, 0x6a, 0x55, 0x92, 0x6c, 0xa1, 0x5a, 0x55, 0xa8, 0x53, 0xaa, 0xa4, 0x6a, 0x95, 0x48, 0xb2, 0x46, 0xaa, 0x58, 0xa7, 0xa2, 0x54, 0xab, 0x54, 0x51, 0xd6, 0x11, 0xd5, 0x2a, 0x52, 0xd4, 0x2a, 0xa5, 0x54, 0x4b, 0xb2, 0x44, 0x53, 0xac, 0x51, 0xaa, 0x24, 0xcb, 0xb8, 0x4a, 0xb2, 0x4e, 0x71, 0x14, 0x45, 0x5a, 0x15, 0x45, 0x59, 0xa5, 0x4a, 0x55, 0xa5, 0x68, 0x93, 0x54, 0x04, 0xfb, 0xbd, 0xd7, 0x5a, 0xed, 0xbb, 0x5f, 0xf7, 
0xf5, 0x8a, 0xb5, 0xed, 0x92, 0x6d, 0xd5, 0x55, 0xd5, 0xea, 0x55, 0xd5, 0x6a, 0xcd, 0xd2, 0x4e, 0xea, 0xd1, 0xce, 0xd2, 0x4a, 0xf5, 0xd2, 0xe5, 0xaa, 0xca, 0xd2, 0xcd, 0xca, 0x55, 0xd2, 0xd5, 0x4a, 0xd2, 0x55, 0xd4, 0xd5, 0x75, 0xa1, 0xd5, 0x72, 0xd1, 0x75, 0xd2, 0xa5, 0xf5, 0xea, 0xa5, 0xfa, 0xd6, 0xe5, 0xb4, 0xf5, 0xed, 0xaa, 0xf5, 0xe3, 0xac, 0xf9, 0xe5, 0xa9, 0x74, 0xeb, 0xe8, 0x6a, 0xf7, 0xea, 0x6a, 0xe4, 0xaa, 0xf5, 0xdc, 0xfc, 0xb6, 0xee, 0x5c, 0xf5, 0xea, 0x62, 0xe5, 0xfc, 0xe3, 0xa5, 0xf4, 0xe5, 0xd6, 0x79, 0xf5, 0xaa, 0xe9, 0x72, 0xd5, 0xed, 0xba, 0xf1, 0xeb, 0xbc, 0xf2, 0xfb, 0xb4, 0xda, 0xea, 0xf2, 0x7c, 0xd5, 0x75, 0xf2, 0xf5, 0xb7, 0xf0, 0x77, 0xd5, 0xfa, 0x72, 0xd5, 0x78, 0x73, 0xdc, 0xe9, 0x7a, 0xdf, 0x76, 0xdd, 0x6f, 0xf5, 0xaf, 0xdd, 0xff, 
0x0f, 0x0b, 0x06, 0x0f, 0x0d, 0x07, 0x0d, 0x0f, 0x0b, 0x06, 0x0d, 0x0f, 0x0b, 0x0f, 0x0f, 0x0b, 0x0f, 0x0e, 0x05, 0x0f, 0x0f, 0x0a, 0x0f, 0x0a, 0x0f, 0x0b, 0x0e, 0x0b, 0x07, 0x0f, 0x0d, 0x07, 0x0d, 0x07, 0x05, 0x0f, 0x0d, 0x07, 0x0d, 0x0f, 0x05, 0x0b, 0x0f, 0x06, 0x0d, 0x0b, 0x0e, 0x0f, 0x0b, 0x0e, 0x0b, 0x0f, 0x0e, 0x0b, 0x0f, 0x0a, 0x0f, 0x0f, 0x0a, 0x0f, 0x0b, 0x0f, 0x0f, 0x0b, 0x0b, 0x0d, 0x0f, 0x0f, 0x07, 0x0d, 0x0e, 0x0f, 0x0a, 0x0f, 0x05, 0x0f, 0x0f, 0x0d, 0x0b, 0x0e, 0x0f, 0x0f, 0x0a, 0x0f, 0x0f, 0x0a, 0x0f, 0x0f, 0x0b, 0x0e, 0x0b, 0x0f, 0x0a, 0x0f, 0x0b, 0x0e, 0x0f, 0x06, 0x0f, 0x0d, 0x0f, 0x0d, 0x0f, 0x0f, 0x0d, 0x07, 0x0f, 0x0e, 0x0f, 0x0b, 0x0d, 0x0f, 0x05, 0x0e, 0x07, 0x0d, 0x0f, 0x0b, 0x0d, 0x07, 0x0f, 0x05, 0x0f, 0x0d, 0x0b, 0x0e, 0x05, 0x0f, 
};

const uint8_t PROGMEM KeypadSmall[] = {
27, 10,
0xfe, 0x01, 0x85, 0x85, 0x05, 0x05, 0x0a, 0x94, 0x48, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x48, 0x84, 0x42, 0x81, 0x05, 0x05, 0x05, 0xbd, 0x01, 0xfe, 
0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 
};

char Alpha[] =
{
  'A','B','C','D','E','F','G','H','I','J','K','L',
  'M','N','O','P','Q','R','S','T','U','V','W','X',
  'Y','Z',' ','0','1','2','3','4','5','6','7','8',
  '9','*',' ','<',
};

char String[] =
{
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
};

char String1[] =
{
  'W','R','I','T','E',' ','I','N',' ','H','E','R','E',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  '*',' ','I','S',' ','M','A','Y','D','A','Y',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
};

char String2[] =
{
  'A','B','C','D','E','F','G','H','I','J','K','L',
  'M','N','O','P','Q','R','S','T','U','V','W','X',
  'Y','Z','0','1','2','3','4','5','6','7','8','9',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
};

char String3[] =
{
  'T','H','E',' ','T','A','O',' ','I','S',' ','C','A','L','L','E','D',' ',
  'T','H','E',' ','G','R','E','A','T',' ','M','O','T','H','E','R',' ',' ',
  'E','M','P','T','Y',' ','Y','E','T',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  'I','N','E','X','A','U','T','A','B','L','E',' ','I','T',' ',' ',' ',' ',
  'G','I','V','E','S',' ','B','I','R','T','H',' ','T','O',' ',' ',' ',' ',
  'I','N','F','I','N','I','T','E',' ','W','O','R','L','D','S',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
};

char String4[] =
{
  'S','O','M','E','T','I','M','E','S',' ','T','H','E','R','E','S',' ','A',
  ' ','M','A','N',' ','I',' ','W','O','N','T',' ','S','A','Y',' ','A',' ',
  'H','E','R','O',' ','C','A','U','S','E',' ','W','H','A','T','S',' ','A',
  'H','E','R','O',' ','B','U','T',' ','S','O','M','E','T','I','M','E','S',
  ' ','T','H','E','R','E','S',' ','A',' ','M','A','N',' ','A','N','D',' ',
  'I','M',' ','T','A','L','K','I','N','G',' ','A','B','O','U','T',' ',' ',
  'T','H','E',' ','D','U','D','E',' ',' ',' ',' ',' ',
};

char String5[] =
{
  'W','H','A','T',' ','H','A','T','H',' ','G','O','D',' ',' ',' ',' ',' ',
  'W','R','O','U','G','T',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  '0','1','0','0','1','0','0','0',' ','0','1','0','0','0','1','0','1',' ',
  '0','1','0','0','1','1','0','0',' ','0','1','0','0','1','1','0','0',' ',
  '0','1','0','0','1','1','1','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
  ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',
};


// Dot Dash //  250 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const uint16_t ATune[] PROGMEM = {
1000,50, NOTE_REST, 50, 1000,150,
TONES_END
};

// Dash Dot Dot Dot // 450
const uint16_t BTune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50,
TONES_END
};

// Dash Dot Dash Dot // 550
const uint16_t CTune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,50,
TONES_END
};

// -.. // 350
const uint16_t DTune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50,
TONES_END
};

// . // 50
const uint16_t ETune[] PROGMEM = {
1000,50,
TONES_END
};

// ..-. // 450
const uint16_t FTune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,50,
TONES_END
};

// --. // 450
const uint16_t GTune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,50,
TONES_END
};

// .... // 350
const uint16_t HTune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50,
TONES_END
};

// .. // 150
const uint16_t ITune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,50,
TONES_END
};

// .--- // 650
const uint16_t JTune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,150,
TONES_END
};

// -.- // 450
const uint16_t KTune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,150,
TONES_END
};

// .-.. // 450
const uint16_t LTune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50,
TONES_END
};

// -- // 350
const uint16_t MTune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,150,
TONES_END
};

// -. // 250
const uint16_t NTune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,50,
TONES_END
};

// --- // 550
const uint16_t OTune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,150,
TONES_END
};

// .--. // 550
const uint16_t PTune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,50,
TONES_END
};

// --.- // 650
const uint16_t QTune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,150,
TONES_END
};

// .-. // 350
const uint16_t RTune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,50,
TONES_END
};

// ... // 250
const uint16_t STune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50,
TONES_END
};

// - // 150
const uint16_t TTune[] PROGMEM = {
1000,150,
TONES_END
};

// ..- // 350
const uint16_t UTune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,150,
TONES_END
};

// ...- // 450
const uint16_t VTune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,150,
TONES_END
};

// .-- // 450
const uint16_t WTune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,150,
TONES_END
};

// -..- // 550
const uint16_t XTune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,150,
TONES_END
};

// -.-- // 650
const uint16_t YTune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,50,  NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,150,
TONES_END
};

// --.. // 550
const uint16_t ZTune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50,
TONES_END
};

// ...---... // 1150
const uint16_t MAYDAYTune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50,
TONES_END
};

// ----- // 0  950 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const uint16_t AATune[] PROGMEM = {
1000,150, NOTE_REST, 50, 1000,150, NOTE_REST, 50, 1000,150, NOTE_REST, 50, 1000,150, NOTE_REST, 50, 1000,150,
TONES_END
};

// .---- // 1 850
const uint16_t BBTune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,150, NOTE_REST, 50, 1000,150, NOTE_REST, 50, 1000,150, NOTE_REST, 50, 1000,150,
TONES_END
};

// ..--- // 2 750
const uint16_t CCTune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,150,
TONES_END
};

// ...-- // 3 650
const uint16_t DDTune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,150,
TONES_END
};

// ....- // 4 550
const uint16_t EETune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,150,
TONES_END
};

// ..... // 5 450
const uint16_t FFTune[] PROGMEM = {
1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50,
TONES_END
};

// -.... // 6 550
const uint16_t GGTune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50,
TONES_END
};

// --... // 7 650
const uint16_t HHTune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50,
TONES_END
};

// ---.. // 8 750
const uint16_t IITune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,50, NOTE_REST,50, 1000,50,
TONES_END
};

// ----. // 9 850
const uint16_t JJTune[] PROGMEM = {
1000,150, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,150, NOTE_REST,50, 1000,50,
TONES_END
};
//char *String[121]; // 120

// Variables

bool firstRun = true;
bool start = false;
bool write = false;
int xRand;
int yRand;
int Left;
int Right;
int cursorX;
int cursorY;
int boxX = 0;
int boxY = 0;
int boxXPos = 0; // 7
int boxYPos = 0; // 5
int Read; // get letter
int Move;
int outputX;
int outputY;
int playX;
int playY;
int count = 0;
int back = 0; //backspace
int cursor[6]; // which cursor to be used for wich message
int ySelect = 0;
int MessageNo = 1; // which message to choose
int Magnify;

void setup()
{
  arduboy.begin();
  arduboy.setFrameRate(60);
  arduboy.initRandomSeed();
  arduboy.display();
  cursor[1] = 47; // starting size of strings
  cursor[2] = 36;
  cursor[3] = 105;
  cursor[4] = 115;
  cursor[5] = 98;
  
}

void loop()
{
  Tinyfont tinyfont = Tinyfont(arduboy.sBuffer, Arduboy2::width(), Arduboy2::height());
  if (!arduboy.nextFrame())
  {
    return;
  }

  // Boot Loader Intro and Title Screen
  while(!start)
  {
    if (!start)
    {
      // Intro
      if (firstRun == true)
      {
        for (int i = 1; i < 2000; i++)
        {
          xRand = rand() % 89 + 1;
          yRand = rand() % 17 + 1;
          arduboy.drawPixel(xRand+18,yRand+22,0);
          arduboy.display();
        }
        arduboy.clear();
        Sprites::drawOverwrite(0, 0, BlitterBrothers, 0);
        arduboy.display();
        arduboy.delayShort(2000);
        arduboy.clear();
        arduboy.display();
        for (int i = 0; 60 > i ; i ++)
        {
        arduboy.clear();
        Sprites::drawOverwrite(0, -60+i, Key, 0);
        arduboy.display();
        arduboy.delayShort(35);
        }
      }
      firstRun = false;
      arduboy.display();

      if (arduboy.pressed(A_BUTTON))
      {
        start = true;
      }
      if (arduboy.pressed(B_BUTTON))
      {
        start = true;
      }
        Sprites::drawOverwrite(0, 0, Key, 0);
        //arduboy.setCursor(8,5);
        //arduboy.print(" Morse Code Writer ");
        arduboy.setCursor(12,18);
        arduboy.print(" Tap The Key ");
        arduboy.display();
    }
  }

  // Start of Main Loop
  arduboy.clear();
  Sprites::drawOverwrite(50, 52, KeypadSmall, 0);
  arduboy.setCursor(23, 54);
  arduboy.print("Edit"); 
  arduboy.setCursor(81, 54);
  arduboy.print("Play"); 

  arduboy.setCursor(5,2);
  arduboy.print("1");
  for (int i = 0; i < 13; i++)
  {
    arduboy.setCursor((i*8)+20,2);
    arduboy.print(String1[i]);
  }

  arduboy.setCursor(5,12);
  arduboy.print("2");
  for (int i = 0; i < 13; i++)
  {
    arduboy.setCursor((i*8)+20,12);
    arduboy.print(String2[i]);
  }

  arduboy.setCursor(5,22);
  arduboy.print("3");
    for (int i = 0; i < 13; i++)
  {
    arduboy.setCursor((i*8)+20,22);
    arduboy.print(String3[i]);
  }

  arduboy.setCursor(5,32);
  arduboy.print("4");
  for (int i = 0; i < 13; i++)
  {
    arduboy.setCursor((i*8)+20,32);
    arduboy.print(String4[i]);
  }

  arduboy.setCursor(5,42);
  arduboy.print("5");
  for (int i = 0; i < 13; i++)
  {
    arduboy.setCursor((i*8)+20,42);
    arduboy.print(String5[i]);
  }

  if (MessageNo > 1)
  {
  if (arduboy.pressed(UP_BUTTON))
  {
  ySelect = ySelect - 10;
  MessageNo = MessageNo -1;
  arduboy.delayShort(100);
  }
  }

  if (MessageNo < 5)
  {
  if (arduboy.pressed(DOWN_BUTTON))
  {
  ySelect = ySelect + 10;
  MessageNo = MessageNo + 1;
  arduboy.delayShort(100);
  }
  }

  if (arduboy.pressed(LEFT_BUTTON))
  {
    Left = 1;
    Right = 0;

    eatString();
    writeScreen();
  }

  if (arduboy.pressed(RIGHT_BUTTON))
  {
    Right = 1;
    Left = 0;

    eatString();
    playMorse();
  }

  arduboy.drawRect(0,0,128,51,1);
  arduboy.drawRect(2,ySelect,11,11,1); // sececting rectangle
  write = false;
  arduboy.display();

} // End of Main Loop

void playMorse()
{
  for (int i = 0 ; i < 120 ; i ++ ) /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {
    drawPlayOutput();

    if (String[i]=='A')
    {
      sound.tones(ATune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("A  .-");
      arduboy.display();
      arduboy.delayShort(450); // delay is code sound length +200
    }
    if (String[i]=='B')
    {
      sound.tones(BTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("B  -...");
      arduboy.display();
      arduboy.delayShort(550);
    }
    if (String[i]=='C')
    {
      sound.tones(CTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("C  -.-.");
      arduboy.display();
      arduboy.delayShort(650);
    }
    if (String[i]=='D')
    {
      sound.tones(DTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("D  -..");
      arduboy.display();
      arduboy.delayShort(550);
    }
    if (String[i]=='E')
    {
      sound.tones(ETune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("E  .");
      arduboy.display();
      arduboy.delayShort(250);
    }
    if (String[i]=='F')
    {
      sound.tones(FTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("F  ..-.");
      arduboy.display();
      arduboy.delayShort(650);
    }
    if (String[i]=='G')
    {
      sound.tones(GTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("G  --.");
      arduboy.display();
      arduboy.delayShort(650);
    }
    if (String[i]=='H')
    {
      sound.tones(HTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("H  ....");
      arduboy.display();
      arduboy.delayShort(550);
    }
    if (String[i]=='I')
    {
      sound.tones(ITune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("I  ..");
      arduboy.display();
      arduboy.delayShort(350);
    }
    if (String[i]=='J')
    {
      sound.tones(JTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("J  .---");
      arduboy.display();
      arduboy.delayShort(850);
    }
    if (String[i]=='K')
    {
      sound.tones(KTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("K  -.-");
      arduboy.display();
      arduboy.delayShort(650);
    }
    if (String[i]=='L')
    {
      sound.tones(LTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("L  .-..");
      arduboy.display();
      arduboy.delayShort(650);
    }
    if (String[i]=='M')
    {
      sound.tones(MTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("M  --");
      arduboy.display();
      arduboy.delayShort(550);
    }
    if (String[i]=='N')
    {
      sound.tones(NTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("N  -.");
      arduboy.display();
      arduboy.delayShort(450);
    }
    if (String[i]=='O')
    {
      sound.tones(OTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("O  ---");
      arduboy.display();
      arduboy.delayShort(750);
    }
    if (String[i]=='P')
    {
      sound.tones(PTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("P  .--.");
      arduboy.display();
      arduboy.delayShort(750);
    }
    if (String[i]=='Q')
    {
      sound.tones(QTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("Q  --.-");
      arduboy.display();
      arduboy.delayShort(850);
    }
    if (String[i]=='R')
    {
      sound.tones(RTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("R  .-.");
      arduboy.display();
      arduboy.delayShort(550);
    }
    if (String[i]=='S')
    {
      sound.tones(STune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("S  ...");
      arduboy.display();
      arduboy.delayShort(450);
    }
    if (String[i]=='T')
    {
      sound.tones(TTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("T  -");
      arduboy.display();
      arduboy.delayShort(350);
    }
    if (String[i]=='U')
    {
      sound.tones(UTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("U  ..-");
      arduboy.display();
      arduboy.delayShort(550);
    }
    if (String[i]=='V')
    {
      sound.tones(VTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("V  ...-");
      arduboy.display();
      arduboy.delayShort(650);
    }
    if (String[i]=='W')
    {
      sound.tones(WTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("W  .--");
      arduboy.display();
      arduboy.delayShort(650);
    }
    if (String[i]=='X')
    {
      sound.tones(XTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("X  -..-");
      arduboy.display();
      arduboy.delayShort(750);
    }
    if (String[i]=='Y')
    {
      sound.tones(YTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("Y  -.--");
      arduboy.display();
      arduboy.delayShort(850);
    }
    if (String[i]=='Z')
    {
      sound.tones(ZTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("Z  --..");
      arduboy.display();
      arduboy.delayShort(750);
    }
    if (String[i]=='*')
    {
      sound.tones(MAYDAYTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("*...---...");
      arduboy.display();
      arduboy.delayShort(1350);
    }
    if (String[i]==' ')
    {
      arduboy.delayShort(100);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("_");
      arduboy.display();
    }
    if (String[i]=='0')
    {
      sound.tones(AATune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("0  -----");
      arduboy.display();
      arduboy.delayShort(1150); // delay is code length +200
    }
    if (String[i]=='1')
    {
      sound.tones(BBTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("1  .----");
      arduboy.display();
      arduboy.delayShort(1050);
    }
    if (String[i]=='2')
    {
      sound.tones(CCTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("2  ..---");
      arduboy.display();
      arduboy.delayShort(950);
    }
    if (String[i]=='3')
    {
      sound.tones(DDTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("3  ...--");
      arduboy.display();
      arduboy.delayShort(850);
    }
    if (String[i]=='4')
    {
      sound.tones(EETune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("4  ....-");
      arduboy.display();
      arduboy.delayShort(750);
    }
    if (String[i]=='5')
    {
      sound.tones(FFTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("5  .....");
      arduboy.display();
      arduboy.delayShort(650);
    }
    if (String[i]=='6')
    {
      sound.tones(GGTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("6  -....");
      arduboy.display();
      arduboy.delayShort(750);
    }
    if (String[i]=='7')
    {
      sound.tones(HHTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("7  --...");
      arduboy.display();
      arduboy.delayShort(850);
    }
    if (String[i]=='8')
    {
      sound.tones(IITune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("8  ---..");
      arduboy.display();
      arduboy.delayShort(950);
    }
    if (String[i]=='9')
    {
      sound.tones(JJTune);
      drawPlayOutput();
      arduboy.setCursor(70,57);
      arduboy.print("9  ----.");
      arduboy.display();
      arduboy.delayShort(1050);
    }
  }
}

void writeScreen()
{
  Tinyfont tinyfont = Tinyfont(arduboy.sBuffer, Arduboy2::width(), Arduboy2::height());
  boxX = 0;
  boxY = 0;
  boxXPos = 0;
  boxYPos = 0;
  count = cursor[MessageNo]; // read from last cursor
  while (!write)
  {
    if (!write)
    {
      arduboy.clear();
      Sprites::drawOverwrite(0, 0, Keypad, 0);
      tinyfont.setCursor(28,60);
      tinyfont.print("TAP");
      tinyfont.setCursor(37, 39);
      tinyfont.print("BACK");
      arduboy.drawRect(1,0,57,36,1);
      arduboy.drawRect(65,0,63,63,1);


      cursorX = 0; // Printing Alpabet
      cursorY = 0;
      outputX = 64; // Printing output
      outputY = 0;

      for (int i = 0 ; i < 40 ; i ++) // position characters
      {
        tinyfont.setCursor(cursorX+3,cursorY+2);
        tinyfont.print(Alpha[i]);
      
        cursorX = cursorX + 7;

        if (i == 7)
        {
          cursorX = 0;
          cursorY = cursorY + 7;
        }
        if (i == 15)
        {
          cursorX = 0;
          cursorY = cursorY + 7;
        }
        if (i == 23)
        {
          cursorX = 0;
          cursorY = cursorY + 7;
        }
        if (i == 31)
        {
          cursorX = 0;
          cursorY = cursorY + 7;
        }  
      }

      for (int i = 0 ; i < 120 ; i ++) // position Output characters
      {
        tinyfont.setCursor(outputX+3,outputY+2);
        tinyfont.print(String[i]);

        if (i == count)
        {
        arduboy.drawLine(outputX+3,outputY+6,outputX+5,outputY+6,1); ////////////////////////////////////////////////////////////////////////////////////////
        }

        outputX = outputX + 5;

        if (i == 11)
        {
          outputX = 64;
          outputY = outputY + 6;
        }
        if (i == 23)
        {
          outputX = 64;
          outputY = outputY + 6;
        }
        if (i == 35)
        {
          outputX = 64;
          outputY = outputY + 6;
        }
        if (i == 47)
        {
          outputX = 64;
          outputY = outputY + 6;
        }
        if (i == 59)
        {
          outputX = 64;
          outputY = outputY + 6;
        }
        if (i == 71)
        {
          outputX = 64;
          outputY = outputY + 6;
        }
        if (i == 83)
        {
          outputX = 64;
          outputY = outputY + 6;
        }
        if (i == 95)
        {
          outputX = 64;
          outputY = outputY + 6;
        }
        if (i == 107)
        {
          outputX = 64;
          outputY = outputY + 6;
        }
      }


      if (Move ==0)
        {
          if (arduboy.pressed(UP_BUTTON))
          {
            boxY = boxY - 7;
            Move = 1;  
            boxYPos = boxYPos - 1;
          }

          if (arduboy.pressed(DOWN_BUTTON))
          {
            boxY = boxY + 7;
            Move = 1;
            boxYPos = boxYPos + 1;
          }

          if (arduboy.pressed(RIGHT_BUTTON))
          {
            boxX = boxX + 7;
            Move = 1;
            boxXPos = boxXPos + 1;
          }

          if (arduboy.pressed(LEFT_BUTTON))
          {
            boxX = boxX - 7;
            Move = 1;
            boxXPos = boxXPos - 1;
          }

          if (boxX < 0)
          {
          boxX = 50;
          boxXPos = 7;
          }

          if (boxX > 50)
          {
          boxX = 1;
          boxXPos = 0;
          }

          if (boxY < 0)
          {
          boxY = 28;
          boxYPos = 4;
          }

          if (boxY > 28)
          {
          boxY = 0;
          boxYPos = 0;
          }
        }


        if (boxYPos == 0)
        {
        Magnify = boxXPos;
        }
        if (boxYPos == 1)
        {
        Magnify = boxXPos+8;
        }
        if (boxYPos == 1)
        {
        Magnify = boxXPos+8;
        }
        if (boxYPos == 2)
        {
        Magnify = boxXPos+16;
        }
        if (boxYPos == 3)
        {
        Magnify = boxXPos+24;
        }
        if (boxYPos == 4)
        {
        Magnify = boxXPos+32;
        }
        arduboy.setCursor(boxX+1,boxY);
        arduboy.print(Alpha[Magnify]);
 
        Move = 0;

      if (arduboy.pressed(A_BUTTON))
      {
        if (boxYPos == 0)
        {
        Read = boxXPos;
        }
        if (boxYPos == 1)
        {
        Read = boxXPos+8;
        }
        if (boxYPos == 1)
        {
        Read = boxXPos+8;
        }
        if (boxYPos == 2)
        {
        Read = boxXPos+16;
        }
        if (boxYPos == 3)
        {
        Read = boxXPos+24;
        }

        if (boxYPos == 4)
        {
          Read = boxXPos+32;
        }

        if (boxYPos == 4)
        {
          if (boxXPos ==7)
          {
            if (count > 0)
            {
              count--;
              String[count] = ' ';
              back = 1; // backspace
            }
          }
        }

        if (count < 120)
        {  
          if (back == 0)
          {
            String[count] = Alpha[Read];
            count++;
          }
          back = 0; 
        }
        arduboy.delayShort(50);
      }

      if (arduboy.pressed(B_BUTTON)) // return to select screen
      {

        feedString();
        cursor[MessageNo] = count; // set cursor positon when exiting write
        write = true;
      }

      arduboy.display();
      arduboy.delayShort(100);
    }
  }
}

void feedString()
{

        if (MessageNo == 1)
        {
          for (int i = 0 ; i < 120 ; i ++) // position Output characters
          {
            String1[i] = String[i];
          }
        }

        if (MessageNo == 2)
        {
          for (int i = 0 ; i < 120 ; i ++) // position Output characters
          {
            String2[i] = String[i];
          }
        }

        if (MessageNo == 3)
        {
          for (int i = 0 ; i < 120 ; i ++) // position Output characters
          {
            String3[i] = String[i];
          }
        }

        if (MessageNo == 4)
        {
          for (int i = 0 ; i < 120 ; i ++) // position Output characters
          {
            String4[i] = String[i];
          }
        }

        if (MessageNo == 5)
        {
          for (int i = 0 ; i < 120 ; i ++) // position Output characters
          {
            String5[i] = String[i];
          }
        }
}

void eatString()
{
        if (MessageNo == 1)
        {
          for (int i = 0 ; i < 120 ; i ++) // position Output characters
          {
            String[i] = String1[i];
          }
        }

        if (MessageNo == 2)
        {
          for (int i = 0 ; i < 120 ; i ++) // position Output characters
          {
            String[i] = String2[i];
          }
        }

        if (MessageNo == 3)
        {
          for (int i = 0 ; i < 120 ; i ++) // position Output characters
          {
            String[i] = String3[i];
          }
        }

        if (MessageNo == 4)
        {
          for (int i = 0 ; i < 120 ; i ++) // position Output characters
          {
            String[i] = String4[i];
          }
        }

        if (MessageNo == 5)
        {
          for (int i = 0 ; i < 120 ; i ++) // position Output characters
          {
            String[i] = String5[i];
          }
        }
}

void drawPlayOutput()
{
arduboy.clear();
  playX = 0;
  playY = 0;
  for (int i = 0 ; i < 120 ; i ++) // position Output characters
      {
        arduboy.setCursor(playX,playY);
        arduboy.print(String[i]);
      
        playX = playX + 7;

        if (i == 17)
        {
          playX = 0;
          playY = playY + 9;
        }
        if (i == 35)
        {
          playX = 0;
          playY = playY + 9;
        }
        if (i == 53)
        {
          playX = 0;
          playY = playY + 9;
        }
        if (i == 71)
        {
          playX = 0;
          playY = playY + 9;
        }
        if (i == 89)
        {
          playX = 0;
          playY = playY + 9;
        }
        if (i == 107)
        {
          playX = 0;
          playY = playY + 9;
        }
      }
      arduboy.display();

}